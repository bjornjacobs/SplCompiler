transpose (p1,p2) :: (Int, (Int, Int))  (Int, (Int, Int))   -> (Int, (Int, Int)) {
    return ((p1.fst + p2.fst), (p1.snd.fst + p2.snd.fst, p1.snd.snd + p2.snd.snd));
}

scale(p, scalar) :: (Int, (Int, Int)) Int -> (Int, (Int, Int)) {
    return (p.fst * scalar, (p.snd.fst * scalar, p.snd.snd * scalar));
}
#EndInput
#Parser Correct
transpose(p1, p2) :: (Int, (Int, Int)) (Int, (Int, Int)) -> (Int, (Int, Int)) {
    return ((p1.fst + p2.fst), ((p1.snd.fst + p2.snd.fst), (p1.snd.snd + p2.snd.snd)));
}
scale(p, scalar) :: (Int, (Int, Int)) Int -> (Int, (Int, Int)) {
    return ((p.fst * scalar), ((p.snd.fst * scalar), (p.snd.snd * scalar)));
}
#EndParser
#Pathanalysis Correct
#Tarjan Correct
[["scale"],["transpose"]]
#Typing Correct
transpose :: (Int, (Int, Int)) (Int, (Int, Int)) -> (Int, (Int, Int));
scale :: (Int, (Int, Int)) Int -> (Int, (Int, Int));
#EndTyping
#Overloading Correct
#CodeGenerator Skip
