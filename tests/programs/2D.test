foo (n)
{
	return (2, 2);
}

transpose (p1, p2)
{
	return ((p1.fst + p2.fst), (p1.snd + p2.snd));
}

scale(p, scalar) {
	return (p.fst * scalar, p.snd * scalar);
}
#EndInput
#Parser Correct
foo(n) {
    return (2, 2);
}
transpose(p1, p2) {
    return ((p1.fst + p2.fst), (p1.snd + p2.snd));
}
scale(p, scalar) {
    return ((p.fst * scalar), (p.snd * scalar));
}
#EndParser
#Pathanalysis Correct
#Tarjan Correct
[["foo"],["scale"],["transpose"]]
#Typing Correct
foo :: a -> (Int, Int);
transpose :: (Int, Int) (Int, Int) -> (Int, Int);
scale :: (Int, Int) Int -> (Int, Int);
#EndTyping
#Overloading Correct
#CodeGenerator Skip
